// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Convert bindings.
class Convert {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Convert(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Convert.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> convert(
    ffi.Pointer<ffi.Int8> configFile,
    ffi.Pointer<ffi.Int8> input,
  ) {
    return _convert(
      configFile,
      input,
    );
  }

  late final _convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('convert');
  late final _convert = _convertPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> convertList(
    ffi.Pointer<ffi.Int8> configFile,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> inputs,
    int length,
  ) {
    return _convertList(
      configFile,
      inputs,
      length,
    );
  }

  late final _convertListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('convertList');
  late final _convertList = _convertListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();
}
